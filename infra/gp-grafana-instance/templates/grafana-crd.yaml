apiVersion: grafana.integreatly.org/v1beta1
kind: Grafana
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "gp-grafana-instance.labels" . | nindent 4 }}
    {{- if .Values.systemDashboards }}
    monitoring.gepardec.com/system: "true"
    {{- end }}
spec:
  persistentVolumeClaim:
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 1Gi
      storageClassName: cephfs-fspool-cluster
  ingress:
    metadata:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-production
    spec:
      defaultBackend:
        service:
          name: grafana-service
          port:
            name: grafana
      ingressClassName: openshift-default
      rules:
        - host: {{ .Values.ingress.hostname }}
          http:
            paths:
              - backend:
                  service:
                    name: grafana-service
                    port:
                      name: grafana
                pathType: ImplementationSpecific
      tls:
        - hosts:
            - {{ .Values.ingress.hostname }}
          secretName: grafana-tls
  config:
    server:
      root_url: https://{{ .Values.ingress.hostname }}
    auth:
      disable_login_form: "False"
      disable_signout_menu: "False"
    auth.generic_oauth:
      client_id: {{ .Values.sso.keycloak.clientId}}
      enabled: "true"
      client_secret: ""
      allow_sign_up: "true"
      token_url: >-
        {{ .Values.sso.keycloak.realmUrl }}/protocol/openid-connect/token
      api_url: >-
        {{ .Values.sso.keycloak.realmUrl }}/protocol/openid-connect/userinfo
      role_attribute_path: >-
        contains(groups[*], '{{ .Values.auth.adminGroups }}') && 'GrafanaAdmin' || contains(groups[*],
        '{{ .Values.auth.editorGroups }}') && 'Editor' || 'Viewer'
      auth_url: >-
        {{ .Values.sso.keycloak.realmUrl }}/protocol/openid-connect/auth
      scopes: openid profile offline_access
    auth.anonymous:
      enabled: "false"
    log:
      level: warn
      mode: console
    log.frontend:
      enabled: "true"
    security:
      admin_user: {{ default "admin" .Values.auth.admin.user }}
    feature_toggles:
      enable: accessTokenExpirationCheck autoMigrateOldPanels correlations publicDashboards nestedFolders

  {{- if .Values.systemDatasources }}
  deployment:
    spec:
      template:
        spec:
          containers:
            - name: grafana
              image: {{ .Values.grafana.version }}
              resources:
                requests:
                  cpu: "25m"
                  memory: "125Mi"
                limits:
                  cpu: "100m"
                  memory: "256Mi"
              {{- if .Values.systemDatasources }}
              env:
                - name: SERVICE_CA
                  valueFrom:
                    configMapKeyRef:
                      key: service-ca.crt
                      name: openshift-service-ca.crt
                - name: LOKI_GATEWAY_ADDRESS
                  value: 'https://loki-gateway-http.openshift-logging.svc.cluster.local:8080/api/logs/v1'
                - name: THANOS_QUERIER_ADDRESS
                  value: 'https://thanos-querier.openshift-monitoring.svc.cluster.local:9091'
                - name: BEARER_TOKEN
                  valueFrom:
                    secretKeyRef:
                      key: token
                      name: grafana-serviceaccount-token
              {{- end }}
  {{- end }}
