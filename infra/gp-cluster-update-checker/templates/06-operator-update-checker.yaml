apiVersion: batch/v1
kind: CronJob
metadata:
  name: operator-update-checker
spec:
  schedule: {{ .Values.checker.operator.schedule }}
  startingDeadlineSeconds: 60
  successfulJobsHistoryLimit: {{ .Values.checker.successfulJobsHistoryLimit }}
  concurrencyPolicy: "Allow"
  suspend: {{ .Values.checker.operator.suspend }}
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: gp-cluster-updater
          containers:
            - name: operator-update-
              image: quay.io/appuio/oc:v4.6
              resources:
                limits:
                  memory: {{ .Values.checker.resources.limits.memory }}
                  cpu: {{ .Values.checker.resources.limits.cpu }}
                requests:
                  memory: {{ .Values.checker.resources.requests.memory }}
                  cpu: {{ .Values.checker.resources.requests.cpu }}
              env:
                - name: SLACK_TARGET_CHANNEL
                  valueFrom:
                    secretKeyRef:
                      name: cluster-update-secret
                      key: slackTargetChannel
              command: ["/bin/bash", "-c"]
              args:
                - |
                  csv=$(oc get subs -A -o json | jq -r '.items[] | select(.status.state == "UpgradePending") | [.metadata.name, .status.installedCSV, .status.currentCSV] | @csv' | tr -d '"')
                  if [[ $csv != "" ]];
                  then
                    res="VerfÃ¼gbare Operator Updates: \n\n"
                    echo "Available Updates: "
                    while IFS="," read -r name installed available
                    do
                      res="${res}>*Name:* ${name}\n>*Aktuelle Version:* ${installed}\n>*Neue Version:* ${available}\n\n"
                      echo "Name: ${name}, Current Version: ${installed}, New Version: ${available}"
                    done < <(echo $csv)
                    curl -X POST -H 'Content-type&#58; application/json' --data '{"text": "'"$res"'"}' $SLACK_TARGET_CHANNEL
                  fi
          restartPolicy: Never
