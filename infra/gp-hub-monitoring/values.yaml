auth:
  mimir:
    htpasswd: ""

mimir:
  runtimeConfig:
    overrides:
      anonymous:
        max_global_series_per_user: 0
        max_label_names_per_series: 60
        ingestion_rate: 200000
        ingestion_burst_size: 500000
        compactor_blocks_retention_period: 15d  # initial test to find out storage requirements
        out_of_order_time_window: 12h
  alertmanager:
    persistentVolume:
      size: 1Gi
    storageClass: longhorn
  distributor:
    resources:
      requests:
        cpu: 200m
        memory: 1024Mi
  ingester:
    resources:
      requests:
        cpu: 400m
        memory: 4096Mi
    persistentVolume:
      size: 60Gi
      storageClass: longhorn
    zoneAwareReplication:
      enabled: false
  querier:
    resources:
      requests:
        cpu: 200m
        memory: 1024Mi
  queryFrontend:
    resources:
      requests:
        cpu: 200m
        memory: 1024Mi
  store_gateway:
    zoneAwareReplication:
      enabled: false
    resources:
      requests:
        cpu: 50m
        memory: 256Mi
    persistentVolume:
      size: 3Gi
      storageClass: longhorn
  compactor:
    resources:
      requests:
        cpu: 400m
        memory: 2048Mi
    persistentVolume:
      size: 10Gi
      storageClass: longhorn
  rollout_operator:
    enabled: false
  minio:
    resources:
      requests:
        cpu: 200m
        memory: 1024Mi
    persistence:
      size: 250Gi
      storageClass: longhorn
    rootPassword: "" # will be set from inventory
  nginx:
    enabled: true
    ingress:
      enabled: true
      ingressClassName: public
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        nginx.org/client-max-body-size: "0"
        nginx.ingress.kubernetes.io/auth-type: basic
        nginx.ingress.kubernetes.io/auth-secret: mimir-basic-auth-credentials
        nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required for pushing metrics to mimir via public ingress'
      hosts:
        - host: mimir.infra.gepaplexx.com
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls:
        - secretName: mimir-nginx-tls
          hosts:
            - mimir.infra.gepaplexx.com
  metaMonitoring:
    serviceMonitor:
      enabled: true
      labels:
        instance: primary
    grafanaAgent:
      logs:
        enabled: false
      metrics:
        scrapeK8s:
          enabled: true
          kubeStateMetrics:
            namespace: kube-system
            labelSelectors:
              app.kubernetes.io/name: kube-state-metrics
grafana:
  rbac:
    pspEnabled: false # PSP are deprecated - removed in kubernetes 1.25
  ingress:
    enabled: true
    ingressClassName: public
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt
    hosts:
      - grafana.infra.gepaplexx.com
    tls:
        - secretName: grafana-tls
          hosts:
          - grafana.infra.gepaplexx.com
  persistence:
    enabled: true
    type: pvc
    accessModes: [ "ReadWriteOnce" ]
    size: 2Gi
    storageClassName: longhorn
  adminUser: "admin"
  adminPassword: "" # value gets set from inventory
  grafana.ini:
    server:
      domain: grafana.infra.gepaplexx.com
      root_url: "https://grafana.infra.gepaplexx.com"
    auth.github:
      enabled: true
      allow_sign_up: true
      scopes: user:email,read:org
      auth_url: https://github.com/login/oauth/authorize
      token_url: https://github.com/login/oauth/access_token
      api_url: https://api.github.com/user
      allowed_organizations: gepaplexx
      client_id: "" # Value gets set from inventory
      client_secret: "" # Value gets set from inventory

kube-state-metrics:
  namespaceOverride: "kube-system"
