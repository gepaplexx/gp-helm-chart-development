{{- if .Values.postgresql.backup.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: '{{ include "gp-keycloak-instance.fullname" . }}-backup'
spec:
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  schedule: '{{ .Values.postgresql.backup.schedule }}'
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        metadata:
          labels:
            app: "sso"
        spec:
          containers:
            - name: "sso-db-backup"
              image: docker.io/bitnami/postgresql:{{ .Values.postgresql.image.tag }}
              command: ["/bin/sh", "-c"]
              args:
                - export TIMESTAMP="`date '+%Y%m%d-%H%M%S'`"
                  && export BACKUP_NAME="db-backup-${TIMESTAMP}.tar.gz"
                  && cd /backup
                  && psql -h ${HOSTNAME} -p ${PORT} -U postgres -w -d postgres -c "select pg_terminate_backend(pid) from pg_stat_activity where datname='${DATABASE}';"
                  && PGPASSWORD="${USER_PASSWORD}" pg_dump -h ${HOSTNAME} -p ${PORT} -U ${USER} -w --format tar --file ${BACKUP_NAME} ${DATABASE}
                  && ln -sf ${BACKUP_NAME} latest
                  && ls -r | tail -n +{{ .Values.postgresql.backup.retain.days }} | xargs rm -f
              resources:
                limits:
                  memory: "128Mi"
                requests:
                  cpu: "100m"
              env:
                - name: "HOSTNAME"
                  value: "{{ .Values.postgresql.fullnameOverride }}"
                - name: "PORT"
                  value: "{{ .Values.postgresql.service.ports.postgresql }}"
                - name: "DATABASE"
                  value: "{{ .Values.postgresql.auth.database }}"
                - name: "USER"
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Values.postgresql.auth.existingSecret }}"
                      key: username
                - name: "USER_PASSWORD"
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Values.postgresql.auth.existingSecret }}"
                      key: password
                - name: "PGPASSWORD"
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Values.postgresql.auth.existingSecret }}"
                      key: postgres-password
              volumeMounts:
                - name: "backup-volume"
                  mountPath: /backup
            {{- if .Values.postgresql.backup.external.enabled }}
            - name: minio-backup-mover
              image: 'quay.io/minio/mc:latest'
              env:
                - name: ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: keycloak-backup-ext-credentials
                      key: AWS_ACCESS_KEY_ID
                - name: SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: keycloak-backup-ext-credentials
                      key: AWS_SECRET_ACCESS_KEY
                - name: HOST
                  valueFrom:
                    secretKeyRef:
                      name: keycloak-backup-ext-credentials
                      key: ENDPOINT_URL
                - name: BUCKET
                  valueFrom:
                    secretKeyRef:
                      name: keycloak-backup-ext-credentials
                      key: BUCKET_NAME
              command: [ "/bin/sh", "-ec" ]
              args:
                - echo "waiting for keycloak backup to be created"
                  && sleep 10
                  && mc --config-dir /root/.mc alias set minio-backup-mover $HOST $ACCESS_KEY_ID $SECRET_KEY
                  && mc --config-dir /root/.mc mirror /backup/ minio-backup-mover/$BUCKET
              resources:
                requests:
                  memory: 10Mi
                  cpu: 10m
              volumeMounts:
                - name: "backup-volume"
                  mountPath: /backup
                - name: "mc-config"
                  mountPath: /root/.mc
            {{- end }}
          volumes:
            - name: "backup-volume"
              persistentVolumeClaim:
                claimName: '{{ include "gp-keycloak-instance.fullname" . }}-backup'
            {{- if .Values.postgresql.backup.external.enabled }}
            - name: "mc-config"
              emptyDir: {}
            {{- end }}
          restartPolicy: Never
{{- end }}