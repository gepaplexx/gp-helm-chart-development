####################
#### VARIABLES #####
####################
argo_workflows_db: &argo_workflows_db "argo_workflows"
argo_workflows_db_secret: &argo_workflows_db_secret "gepardec-run-cicd-tools-postgresql"
argo_workflows_db_host: &argo_workflows_db_host "argo-workflows-postgres"

clustername: dev
domain: run.gepardec.com

workflows:
  ingress:
    enabled: true
    hostname: workflows.{{ .Values.clustername }}.{{ .Values.domain}}
    ingressClassName: "openshift-default"
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-production

kubeconfig:
  apiUrl: https://api.c-gepa-play.gepa.vshnmanaged.net:6443

vela-core:
  admissionWebhooks:
    enabled: false
  multicluster:
    enabled: false


####################
##  ARGO  EVENTS  ##
####################
argo_events:
  eventbus:
    namespace: gp-cicd-eventbus
  enabled: true
  fullnameOverride: argo-events
  openshift: true
  crds:
    install: true
    keep: false
  controller:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
  configs:
    jetstream:
      versions:
      # Die hier angegebenen Versionen werden in die "argo-events-controller-manager" ConfigMap geschrieben.
      # Das ist die Voraussetzung dafür, dass die "EventBus" Ressource den EventBus mit der angegebenen Version starten kann.
        - version: "2.9.18"
          natsImage: docker.io/nats:2.9.18
          metricsExporterImage: docker.io/natsio/prometheus-nats-exporter:0.11.0
          configReloaderImage: docker.io/natsio/nats-server-config-reloader:0.11.0
          startCommand: /nats-server
      # Default-Latest Version wie im Sub-Chart normalerweise konfiguriert.
        - version: "latest"
          natsImage: docker.io/nats:latest
          metricsExporterImage: docker.io/natsio/prometheus-nats-exporter:latest
          configReloaderImage: docker.io/natsio/nats-server-config-reloader:latest
          startCommand: /nats-server

####################
## ARGO WORFKLOWS ##
####################
argo_workflows:
  enabled: true
  fullnameOverride: argo-workflows
  crds:
    install: true
    keep: false

  images:
    pullPolicy: IfNotPresent

  rbac:
    sudoGroup: gepardec-run-admins
    clusterscoped:
      developerGroup: Developers
      enabled: false
    defaultRead: true
    clientId: "argo-workflows"

  executor:
    securityContext:
      runAsUser: 1000
      runAsGroup: 0
      runAsNonRoot: true

  server:
    extraArgs:
      - "--auth-mode=sso"
      - "--auth-mode=client"
    extraEnv:
      - name: "SSO_DELEGATE_RBAC_TO_NAMESPACE"
        value: "true"
    # sso configuration:
    sso:
      enabled: true
      issuer: https://sso.clustername.example.com/realms/internal
      redirectUrl: https://workflows.clustername.example.com/oauth2/callback
      clientSecret:
        name: argo-workflows-sso
        key: client-secret
      clientId:
        name: argo-workflows-sso
        key: client-id
      rbac:
        enabled: true
    ingress:
      enabled: false

    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi

  mainContainer:
    resources:
      requests:
        cpu: 250m
        memory: 512Mi
      limits:
        cpu: 1
        memory: 4Gi
    securityContext:
      runAsUser: 1000
      runAsGroup: 0
      runAsNonRoot: true

  controller:
    parallelism: 10 # 10 workflows can be executed at the same time cluster-wide
    namespaceParallelism: 5 # only 5 workflows per namespace can be executed in parallel
    nodeStatusOffLoad: false
    workflowDefaults:
      spec:
        ttlStrategy:
          secondsAfterCompletion: 3600 # delete workflows after 1 hour. they are still available in the archive
        securityContext:
          fsGroup: 0 # required so workflows mount shared PVCs with correct volume permissions
    workflowRestrictions:
      templateReferencing: Strict # only workflows using workflowTemplateRef will be executed
    resources:
      limits:
        memory: 512Mi
      requests:
        cpu: 500m
        memory: 256Mi

    metricsConfig:
      enabled: true
      metricsTTL: 2h # Metriken werden nach 2 Stunden vom Workflow Controller Endpunkt gelöscht.
    serviceMonitor:
      enabled: true

    persistence:
      archive: true
      nodeStatusOffLoad: true # if true node status is only saved to the persistence DB to avoid the 1MB limit in etcd
      archiveTTL: 120d
      connectionPool:
        maxIdleConns: 50
      postgresql:
        host: *argo_workflows_db_host
        port: 5432
        database: *argo_workflows_db
        tableName: argo_workflows
        userNameSecret:
          name: *argo_workflows_db_secret
          key: username
        passwordSecret:
          name: *argo_workflows_db_secret
          key: password

  archive:
    enabled: false # TODO Umstellen
  useDefaultArtifactRepo: true
  artifactRepository:
    archiveLogs: false # TODO Umstellen
    s3:
      accessKeySecret:
        name: workflows-artifact-repository
        key: accesskey
      secretKeySecret:
        name: workflows-artifact-repository
        key: secretkey
      insecure: true
      bucket: argo-workflows
      endpoint: #TODO S3 Bucket von Exoscale location

  workflow:
    serviceAccount:
      create: true
      name: operate-workflow-sa


####################
##    ARGO  CD    ##
####################
argocd:
  enabled: true
  ingress:
    hostname: argocd.{{ .Values.clustername }}.{{ .Values.domain}}
    annotations:
     cert-manager.io/cluster-issuer: letsencrypt-production
  applicationset:
    resources:
      limits:
        cpu: "1"
        memory: 1Gi
      requests:
        cpu: 10m
        memory: 512Mi
  controller:
    resources:
      limits:
        cpu: "1"
        memory: 2Gi
      requests:
        cpu: 20m
        memory: 512Mi
  dex:
    resources:
      limits:
        cpu: 100m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 128Mi
  redis:
    resources:
      limits:
        cpu: 50m
        memory: 1Gi
      requests:
        cpu: 5m
        memory: 128Mi
  repo:
    resources:
      limits:
        cpu: 600m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 128Mi
  server:
    resources:
      limits:
        cpu: 100m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 128Mi
  rbac:
    defaultPolicy: ''
    policies:
      - 'p, role:gepardec-admin, applications, *, *, allow'
      - 'p, role:gepardec-admin, repositories, *, *, allow'
      - 'p, role:gepardec-admin, projects, *, *, allow'
      - 'g, gepardec-run-admins, role:admin'
      - 'g, Developers, role:gepardec-admin'

######################
##    Postgresql    ##
######################
postgresql:
  enabled: true
  fullnameOverride: *argo_workflows_db_host
  service:
    ports:
      postgresql: 5432
  auth:
    username: argo_workflow
    database: *argo_workflows_db
    existingSecret: *argo_workflows_db_secret
  primary:
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false

######################
##    Baukasten     ##
######################
baukasten:
  enabled: false
  components:
    name: "components"
    source:
      repoURL: "https://github.com/gepaplexx/baukasten.git"
      path: "components"

  traits:
    name: "traits"
    source:
      repoURL: "https://github.com/gepaplexx/baukasten.git"
      path: "traits"

