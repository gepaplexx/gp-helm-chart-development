{{- if .Values.argocd.enabled -}}
apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  finalizers:
    - argoproj.io/finalizer
  name: {{ .Release.Name }}-argocd
  namespace: {{  .Release.Namespace }}
  labels:
    {{- include "gp-cicd-tools.labels" . | nindent 4 }}
spec:
  applicationSet:
    resources:
      limits:
        cpu: {{ .Values.argocd.applicationset.resources.limits.cpu }}
        memory: {{ .Values.argocd.applicationset.resources.limits.memory }}
      requests:
        cpu: {{ .Values.argocd.applicationset.resources.requests.cpu }}
        memory: {{ .Values.argocd.applicationset.resources.requests.memory }}
  controller:
    processors: { }
    resources:
      limits:
        cpu: {{ .Values.argocd.controller.resources.limits.cpu }}
        memory: {{ .Values.argocd.controller.resources.limits.memory }}
      requests:
        cpu: {{ .Values.argocd.controller.resources.requests.cpu }}
        memory: {{ .Values.argocd.controller.resources.requests.memory }}
    sharding: { }
  sso:
    provider: dex
    dex:
      openShiftOAuth: true
      resources:
        limits:
          cpu: {{ .Values.argocd.dex.resources.limits.cpu }}
          memory: {{ .Values.argocd.dex.resources.limits.memory }}
        requests:
          cpu: {{ .Values.argocd.dex.resources.requests.cpu }}
          memory: {{ .Values.argocd.dex.resources.requests.memory }}
  grafana:
    enabled: false
  ha:
    enabled: false
  initialSSHKnownHosts: { }
  prometheus:
    enabled: true
  rbac:
    defaultPolicy: '{{ .Values.argocd.rbac.defaultPolicy }}'
    policy: |
      {{- range .Values.argocd.rbac.policies }}
      {{ . }}
      {{- end }}
    scopes: '[groups]'
  redis:
    resources:
      limits:
        cpu: {{ .Values.argocd.redis.resources.limits.cpu }}
        memory: {{ .Values.argocd.redis.resources.limits.memory }}
      requests:
        cpu: {{ .Values.argocd.redis.resources.requests.cpu }}
        memory: {{ .Values.argocd.redis.resources.requests.memory }}
  repo:
    {{- if .Values.baukasten.enabled }}
    volumes:
      - name: custom-tools
        emptyDir: { }
      - name: kubeconfig
        emptyDir: { }
      - name: vela-cli-dir
        emptyDir: { }
      - name: vela-cmp
        configMap:
          name: vela-plugins-config
      - name: kubeconfig-template
        configMap:
          name: vela-kubeconfig
      - name: argocd-vela-sa
        secret:
          secretName: argocd-vela-sa-secret
    {{- end }}
    {{- if .Values.baukasten.enabled }}
    initContainers:
      - name: kubeconfig
        image: 'nginx'
        command:
          - bash
          - '-c'
          - |
            echo "load api token..."
            export API_TOKEN=$(cat /token)
            echo "replacing api token in kubeconfig..."
            envsubst < /kubeconfigtemplate/config.template > /kubeconfig/config
        volumeMounts:
          - name: kubeconfig-template
            mountPath: /kubeconfigtemplate
          - name: kubeconfig
            mountPath: /kubeconfig
          - name: argocd-vela-sa
            mountPath: /token
            subPath: token
      - name: kubevela
        command:
          - bash
          - '-c'
          - |
            #!/usr/bin/env bash
            set -eo pipefail
            curl -fsSl https://kubevela.io/script/install.sh | bash -s 1.8.2
        env:
          - name: VELA_INSTALL_DIR
            value: /custom-tools
        volumeMounts:
          - name: custom-tools
            mountPath: /custom-tools
        image: 'nginx'
    {{- end }}
    {{- if .Values.baukasten.enabled }}}}
    sidecarContainers:
      - name: vela-application-plugin
        image: nginx
        command: [ "/var/run/argocd/argocd-cmp-server" ]
        env:
          - name: KUBECONFIG
            value: /kubeconfig/config
        volumeMounts:
          - name: var-files
            mountPath: /var/run/argocd
          - name: vela-cli-dir
            mountPath: /.vela
          - name: kubeconfig
            mountPath: /kubeconfig
          - name: plugins
            mountPath: /home/argocd/cmp-server/plugins
          - name: vela-cmp
            mountPath: /var/run/argocd/vela/vela-application-plugin-generate.sh
            subPath: vela-application-plugin-generate.sh
          - name: vela-cmp
            mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: vela-application-plugin.yaml
          - name: custom-tools
            mountPath: /usr/local/bin/vela
            subPath: vela
      - name: vela-cue-transform-plugin
        image: nginx
        command: [ "/var/run/argocd/argocd-cmp-server" ]
        env:
          - name: KUBECONFIG
            value: /kubeconfig/config
        volumeMounts:
          - name: var-files
            mountPath: /var/run/argocd
          - name: vela-cli-dir
            mountPath: /.vela
          - name: kubeconfig
            mountPath: /kubeconfig
          - name: plugins
            mountPath: /home/argocd/cmp-server/plugins
          - name: vela-cmp
            mountPath: /var/run/argocd/vela/vela-cue-transform-plugin-generate.sh
            subPath: vela-cue-transform-plugin-generate.sh
          - name: vela-cmp
            mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: vela-cue-transform-plugin.yaml
          - name: custom-tools
            mountPath: /usr/local/bin/vela
            subPath: vela#
    {{- end }}
    resources:
      limits:
        cpu: {{ .Values.argocd.repo.resources.limits.cpu }}
        memory: {{ .Values.argocd.repo.resources.limits.memory }}
      requests:
        cpu: {{ .Values.argocd.repo.resources.requests.cpu }}
        memory: {{ .Values.argocd.repo.resources.requests.memory }}
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
    - apiGroups:
      - cilium.io
      kinds:
      - CiliumIdentity
      clusters:
      - "*"
  server:
    {{- if .Values.argocd.ingress.hostname }}
    host: {{ tpl .Values.argocd.ingress.hostname . }}
    {{- end }}
    autoscale:
      enabled: false
    grpc:
      ingress:
        enabled: false
    ingress:
      enabled: true
      tls:
        - hosts:
            - {{ tpl .Values.argocd.ingress.hostname . }}
          secretName: {{ tpl .Values.argocd.ingress.hostname . }}-tls
      annotations:
        {{- range $key, $value := .Values.argocd.ingress.annotations }}
        {{ $key }}: {{ $value }}
        {{- end }}
    insecure: true
    resources:
      limits:
        cpu: {{ .Values.argocd.server.resources.limits.cpu }}
        memory: {{ .Values.argocd.server.resources.limits.memory }}
      requests:
        cpu: {{ .Values.argocd.server.resources.requests.cpu }}
        memory: {{ .Values.argocd.server.resources.requests.memory }}
    route:
      enabled: false
    service:
      type: ""
  tls:
    ca: {}
{{- end -}}