apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ .Values.argo_workflows.server.sso.clientSecret.name }}
  namespace: {{ .Release.Namespace }}
spec:
  # benötigte Values: client-id, client-secret (in dieser Schreibweise!)
  dataFrom:
    - extract:
        key: #TODO in vault definieren und einfügen. Hier Pfad aktualisieren
        conversionStrategy: Default
        decodingStrategy: None
  refreshInterval: 12h
  secretStoreRef:
    kind: ClusterSecretStore
    name: #TODO in vault definieren und einfügen. Hier Pfad aktualisieren
  target:
    creationPolicy: Owner
    deletionPolicy: Retain
    name: {{ .Values.argo_workflows.server.sso.clientSecret.name }}
    template:
      engineVersion: v2
      metadata:
        labels:
          app.kubernetes.io/managed-by: {{ .Values.argo_workflows.server.sso.clientSecret.name }}
---
### RBAC CONFIGURATION
## BEGINN DEFAULT READONLY USER
# Default ReadOnly SA for OAuth authenticated users
apiVersion: v1
kind: Secret
metadata:
  name: workflows-read-only-token
  namespace: {{ .Release.Namespace }}
  annotations:
    kubernetes.io/service-account.name: workflows-read-only
type: kubernetes.io/service-account-token
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: workflows-read-only
  namespace: {{ .Release.Namespace }}
  annotations:
    workflows.argoproj.io/rbac-rule: "'system:authenticated:oauth' in groups"
    workflows.argoproj.io/rbac-rule-precedence: "0"
secrets:
  - name: workflows-read-only-token
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: workflow-read-only-role
rules:
- apiGroups:
    - argoproj.io
  verbs:
    - "get"
    - "list"
    - "watch"
  resources:
    - analysisruns
    - analysistemplates
    - clusteranalysistemplates
    - clusterworkflowtemplates
    - cronworkflows
    - eventbus
    - eventsources
    - experiments
    - sensors
    - workfloweventbindings
    - workflows
    - workflowtaskresults
    - workflowtasksets
    - workflowtemplates
    - pipelines
# damit Logs der Workflows auf der UI ausgelesen werden können.
- apiGroups:
    - ""
  verbs:
    - get
    - list
    - watch
  resources:
    - pods/log
    - pods/status
    - pods
  # erlaubt das Abrufen von Logs von Archived Workflows.
- apiGroups:
    - ""
  verbs:
    - get
  resources:
    - secrets
  resourceNames:
    - workflows-artifact-repository
---
{{- if .Values.argo_workflows.rbac.defaultRead }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: workflow-read-only-binding
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: workflow-read-only-role
subjects:
  - kind: ServiceAccount
    name: workflows-read-only
    namespace: {{ .Release.Namespace }}
## END DEFAULT READONLY USER
---
{{- end }}
## BEGIN GEPARDEC RUN ARGO WORKFLOWS SUPER USER
apiVersion: v1
kind: Secret
metadata:
  name: workflows-super-admin-token
  namespace: {{ .Release.Namespace }}
  annotations:
    kubernetes.io/service-account.name: workflows-super-admin
type: kubernetes.io/service-account-token
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: workflows-super-admin
  namespace: {{ .Release.Namespace }}
  annotations:
    workflows.argoproj.io/rbac-rule: "'{{ .Values.argo_workflows.rbac.sudoGroup }}' in groups"
    workflows.argoproj.io/rbac-rule-precedence: "999"
secrets:
  - name: workflows-super-admin-token
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: workflows-super-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: operate-workflow-role
subjects:
  - kind: ServiceAccount
    name: workflows-super-admin
    namespace: {{ .Release.Namespace }}
## END GEPARDEC RUN ARGO WORKFLOWS SUPER USER
---
## BEGINN ARGO WORKFLOWS DEVELOPER PERMISSIONS
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: workflow-developer-role
rules:
  - apiGroups:
      - argoproj.io
    verbs:
      - "get"
      - "list"
      - "watch"
      - "update"
      - "create"
      - "delete"
      - "patch"
    resources:
      - analysisruns
      - analysistemplates
      - clusteranalysistemplates
      - clusterworkflowtemplates
      - cronworkflows
      - eventbus
      - eventsources
      - experiments
      - sensors
      - workfloweventbindings
      - workflows
      - workflowtaskresults
      - workflowtasksets
      - workflowtemplates
      - pipelines
  # damit Logs der Workflows auf der UI ausgelesen werden können.
  - apiGroups:
      - ""
    verbs:
      - get
      - list
      - watch
      - delete
    resources:
      - pods/log
      - pods/status
      - pods
  # erlaubt das Abrufen von Logs von Archived Workflows.
  - apiGroups:
      - ""
    verbs:
      - get
    resources:
      - secrets
    resourceNames:
      - workflows-artifact-repository
---
{{- if .Values.argo_workflows.rbac.clusterscoped.enabled }}
# ServiceAccount und Clusterrolebinding nur anlegen, wenn es eine Gruppe gibt, die Clusterweit Workflows anlegen darf
apiVersion: v1
kind: Secret
metadata:
  name: workflow-developer-default-token
  namespace: {{ .Release.Namespace }}
  annotations:
    kubernetes.io/service-account.name: workflow-developer-default
type: kubernetes.io/service-account-token
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: workflow-developer-default
  namespace: {{ .Release.Namespace }}
  annotations:
    workflows.argoproj.io/rbac-rule: "'{{ .Values.argo_workflows.rbac.clusterscoped.developerGroup }}' in groups"
    workflows.argoproj.io/rbac-rule-precedence: "100"
secrets:
  - name: workflow-developer-default-token
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: workflow-developer-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: workflow-developer-role
subjects:
  - kind: ServiceAccount
    name: workflow-developer-default
    namespace: {{ .Release.Namespace }}
## END ARGO WORKFLOWS DEVELOPER PERMISSIONS
---
{{- end }}
# Required for Namespace Delegation so Clusterworkflowtemplates can be used during workflow execution
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: workflow-clusterresources-role
rules:
  - apiGroups:
      - argoproj.io
    verbs:
      - "get"
      - "list"
      - "watch"
    resources:
      - clusteranalysistemplates
      - clusterworkflowtemplates
---