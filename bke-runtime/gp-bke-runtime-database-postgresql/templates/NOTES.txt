CHART NAME: {{ .Chart.Name }}
CHART VERSION: {{ .Chart.Version }}
APP VERSION: {{ .Chart.AppVersion }}

** Please be patient while the chart is being deployed **

{{- if .Values.db.diagnosticMode.enabled }}
The chart has been deployed in diagnostic mode. All probes have been disabled and the command has been overwritten with:

  command: {{- include "common.tplvalues.render" (dict "value" .Values.db.diagnosticMode.command "context" $) | nindent 4 }}
  args: {{- include "common.tplvalues.render" (dict "value" .Values.db.diagnosticMode.args "context" $) | nindent 4 }}

Get the list of pods by executing:

  kubectl get pods --namespace {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }}

Access the pod you want to debug by executing

  kubectl exec --namespace {{ .Release.Namespace }} -ti <NAME OF THE POD> -- /opt/bitnami/scripts/postgresql/entrypoint.sh /bin/bash

In order to replicate the container startup scripts execute this command:

    /opt/bitnami/scripts/postgresql/entrypoint.sh /opt/bitnami/scripts/postgresql/run.sh

{{- else }}

PostgreSQL can be accessed via port {{ include "postgresql.service.port" .Subcharts.db }} on the following DNS names from within your cluster:

    {{ include "postgresql.primary.fullname" .Subcharts.db }}.{{ .Release.Namespace }}.svc.cluster.local - Read/Write connection

{{- if eq .Values.architecture "replication" }}

    {{ include "postgresql.readReplica.fullname" .Subcharts.db }}.{{ .Release.Namespace }}.svc.cluster.local - Read only connection

{{- end }}

{{- $customUser := include "postgresql.username" .Subcharts.db }}
{{- if and (not (empty $customUser)) (ne $customUser "postgres") .Values.db.auth.enablePostgresUser }}

To get the password for "postgres" run:

    export POSTGRES_ADMIN_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "postgresql.secretName" .Subcharts.db }} -o jsonpath="{.data.postgres-password}" | base64 --decode)

To get the password for "{{ $customUser }}" run:

    export POSTGRES_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "postgresql.secretName" .Subcharts.db }} -o jsonpath="{.data.password}" | base64 --decode)

{{- else }}

To get the password for "{{ default "postgres" $customUser }}" run:

    export POSTGRES_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "postgresql.secretName" .Subcharts.db }} -o jsonpath="{.data.{{ ternary "password" "postgres-password" (and (not (empty $customUser)) (ne $customUser "postgres")) }}}" | base64 --decode)

{{- end }}

To connect to your database run the following command:

    kubectl run {{ include "common.names.fullname" . }}-client --rm --tty -i --restart='Never' --namespace {{ .Release.Namespace }} --image {{ include "postgresql.image" .Subcharts.db }} --env="PGPASSWORD=$POSTGRES_PASSWORD" \
      --command -- psql --host {{ include "postgresql.primary.fullname" .Subcharts.db }} -U {{ default "postgres" $customUser }} -d {{- if include "postgresql.database" .Subcharts.db }} {{ include "postgresql.database" .Subcharts.db }}{{- else }} postgres{{- end }} -p {{ include "postgresql.service.port" .Subcharts.db }}

    > NOTE: If you access the container using bash, make sure that you execute "/opt/bitnami/scripts/entrypoint.sh /bin/bash" in order to avoid the error "psql: local user with ID {{ .Values.db.primary.containerSecurityContext.runAsUser }}} does not exist"

To connect to your database from outside the cluster execute the following commands:

{{- if contains "NodePort" .Values.db.primary.service.type }}

    export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
    export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "postgresql.primary.fullname" .Subcharts.db }})
    PGPASSWORD="$POSTGRES_PASSWORD" psql --host $NODE_IP --port $NODE_PORT -U {{ default "postgres" $customUser }} -d {{- if include "postgresql.database" .Subcharts.db }} {{ include "postgresql.database" .Subcharts.db }}{{- else }} postgres{{- end }}

{{- else if contains "LoadBalancer" .Values.db.primary.service.type }}

  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
        Watch the status with: 'kubectl get svc --namespace {{ .Release.Namespace }} -w {{ include "postgresql.primary.fullname" .Subcharts.db }}'

    export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "postgresql.primary.fullname" .Subcharts.db }} --template "{{ "{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}" }}")
    PGPASSWORD="$POSTGRES_PASSWORD" psql --host $SERVICE_IP --port {{ include "postgresql.service.port" .Subcharts.db }} -U {{ default "postgres" $customUser }} -d {{- if include "postgresql.database" .Subcharts.db }} {{ include "postgresql.database" .Subcharts.db }}{{- else }} postgres{{- end }}

{{- else if contains "ClusterIP" .Values.db.primary.service.type }}

    kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ include "postgresql.primary.fullname" .Subcharts.db }} {{ include "postgresql.service.port" .Subcharts.db }}:{{ include "postgresql.service.port" .Subcharts.db }} &
    PGPASSWORD="$POSTGRES_PASSWORD" psql --host 127.0.0.1 -U {{ default "postgres" $customUser }} -d {{- if include "postgresql.database" .Subcharts.db }} {{ include "postgresql.database" .Subcharts.db }}{{- else }} postgres{{- end }} -p {{ include "postgresql.service.port" .Subcharts.db }}

{{- end }}
{{- end }}

{{- include "postgresql.validateValues" .Subcharts.db -}}
{{- include "common.warnings.rollingTag" .Values.db.image -}}
{{- include "common.warnings.rollingTag" .Values.db.volumePermissions.image }}
